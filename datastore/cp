#!/bin/bash
#
#==========================================================================
# Copyright 2016 LINBIT USA LCC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#==========================================================================

# Set up environment
if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

source "$LIB_LOCATION"/sh/scripts_common.sh

DRIVER_PATH=$(dirname "$0")
source "${DRIVER_PATH}"/../libfs.sh
source "${DRIVER_PATH}"/drbd_common.sh
source "${DRIVER_PATH}"/drbdmanage.conf

drbd_log "Beginning cp action."

# Get arguments from OpenNebula Core
DRIVER_ACTION=$1
IMAGE_ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRIVER_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DRBD_REDUNDANCY \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/DRBD_DEPLOYMENT_NODES \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/MD5 \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/SHA1 \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NO_DECOMPRESS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LIMIT_TRANSFER_BW)

BASE_PATH="${XPATH_ELEMENTS[j++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[j++]}"
SAFE_DIRS="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
DRBD_REDUNDANCY="${XPATH_ELEMENTS[j++]}"
DRBD_DEPLOYMENT_NODES="${XPATH_ELEMENTS[j++]}"
SRC="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]:-0}"
MD5="${XPATH_ELEMENTS[j++]}"
SHA1="${XPATH_ELEMENTS[j++]}"
NO_DECOMPRESS="${XPATH_ELEMENTS[j++]}"
LIMIT_TRANSFER_BW="${XPATH_ELEMENTS[j++]}"

DST_HOST=$(get_destination_host "$IMAGE_ID")

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

# Create new resource in DRBD.
DRBD_SIZE="${SIZE}M"
DRBD_RES_NAME="OpenNebula-image-${IMAGE_ID}"

drbd_log "Creating a new $DRBD_SIZE resource $DRBD_RES_NAME \
  on the following nodes: $BRIDGE_LIST"

drbd_add_res "$DRBD_RES_NAME" "$DRBD_SIZE"

if [ "$(drbd_deploy_res_on_nodes "$DRBD_RES_NAME")" -ne 0 ]; then
  error_message "Unable to deploy $DRBD_RES_NAME"

  # Clean up resource.
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
fi

# Set up copy command.
DOWNLOADER_ARGS=$(set_downloader_args "$MD5" "$SHA1" "$NO_DECOMPRESS" "$LIMIT_TRANSFER_BW" "$SRC" -)

COPY_COMMAND="$DRIVER_PATH/../downloader.sh $DOWNLOADER_ARGS"

case $SRC in
http://*|https://*)

    log "Downloading $SRC to the image repository"
    drbd_log "Downloading $SRC to the image repository"
    ;;

*)

    if [ "$(check_restricted "$SRC")" -eq 1 ]; then

        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $SRC"

        # Clean up resource.
        drbd_remove_res "$DRBD_RES_NAME"
        exit -1

    fi

    log "Copying local image $SRC to the image repository"
    drbd_log "Copying local image $SRC to the image repository"
    ;;

esac

# Get the location of the DRBD device node.
DRBD_DEVICE_PATH=$(drbd_get_device_for_res "$DRBD_RES_NAME")

# Find node with a resource assigned to it.
RES_HOST=$(drbd_get_assignment_node "$DRBD_DEVICE_PATH" $BRIDGE_LIST)

if [ -z "$RES_HOST" ]; then
  error_message "No node in $BRIDGE_LIST ready for IO on $DRBD_DEVICE_PATH"

  # Clean up resource.
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
fi

# Copy SRC on the the DRBD device.
$(exec_and_log "eval $COPY_COMMAND | $SSH $RES_HOST $DD of=$DRBD_DEVICE_PATH bs=2M" \
  "Error dumping $SRC to $RES_HOST:$DRBD_DEVICE_PATH")

# Remove the resource if copy fails.
COPY_RC=$1

if [ "$COPY_RC" -ne 0 ]; then
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
fi


drbd_log "Ending cp action."
echo "$DRBD_RES_NAME"
