#!/bin/bash

# Set up environment
if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

source "${LIB_LOCATION}"/sh/scripts_common.sh

DRIVER_PATH=$(dirname "$0")
source "${DRIVER_PATH}"/../libfs.sh
source "${DRIVER_PATH}"/drbd_common.sh
source "${DRIVER_PATH}"/drbdmanage.conf

drbd_log "Beginning clone action."

# Get arguments from OpenNebula Core
DRIVER_ACTION=$1
IMAGE_ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRIVER_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH)

BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
DRBD_RES_NAME="${XPATH_ELEMENTS[j++]}"

DST_HOST=$(get_destination_host "$IMAGE_ID")

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

DRBD_CLONE_NAME=OpenNebula-clone-${IMAGE_ID}

# Make a new resource from an existing one.
if [ "$(drbd_clone_res "$DRBD_CLONE_NAME" "$DRBD_RES_NAME" $BRIDGE_LIST)" -ne 0 ]; then
  error_message "Unable to deploy $DRBD_CLONE_NAME"

  # Clean up resource.
  drbd_remove_res "$DRBD_CLONE_NAME"
  exit -1
fi

echo "$DRBD_CLONE_NAME"

drbd_log "Ending clone action."

exit 0
