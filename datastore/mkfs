#!/bin/bash

# Set up environment
if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

source "$LIB_LOCATION"/sh/scripts_common.sh

DRIVER_PATH=$(dirname "$0")
source "${DRIVER_PATH}"/../libfs.sh
source "${DRIVER_PATH}"/drbd_common.sh

drbd_log "Begining mkfs action."

# Get arguments from OpenNebula Core
DRIVER_ACTION=$1
IMAGE_ID=$2

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRIVER_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/BASE_PATH \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RESTRICTED_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/SAFE_DIRS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BRIDGE_LIST \
                    /DS_DRIVER_ACTION_DATA/IMAGE/FSTYPE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE)

BASE_PATH="${XPATH_ELEMENTS[j++]}"
RESTRICTED_DIRS="${XPATH_ELEMENTS[j++]}"
SAFE_DIRS="${XPATH_ELEMENTS[j++]}"
BRIDGE_LIST="${XPATH_ELEMENTS[j++]}"
FSTYPE="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]:-0}"

DST_HOST=$(get_destination_host "$IMAGE_ID")

# Get the name and size for a drbd resource.
DRBD_SIZE="${SIZE}M"
DRBD_RES_NAME="OpenNebula-image-${IMAGE_ID}"

# Do not make a new resrouce for save as, just return the name.
if [  "$FSTYPE" = "save_as" ]; then
    drbd_log "No need to create new image, exiting."

    echo "$DRBD_RES_NAME"
    exit 0
fi

if [ -z "$DST_HOST" ]; then
    error_message "Datastore template missing 'BRIDGE_LIST' attribute."
    exit -1
fi

set_up_datastore "$BASE_PATH" "$RESTRICTED_DIRS" "$SAFE_DIRS"

# Create new resource in drbd.
drbd_log "Creating a new $DRBD_SIZE resource $DRBD_RES_NAME \
  on the following nodes: $BRIDGE_LIST"

drbd_add_res "$DRBD_RES_NAME" "$DRBD_SIZE"
if [ "$(drbd_deploy_res_on_nodes "$DRBD_RES_NAME" "$BRIDGE_LIST")" -ne 0 ]; then
  error_message "Unable to deploy $DRBD_RES_NAME"

  # Clean up resource.
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
fi

# Get the location of the DRBD device node.
DRBD_DEVICE_PATH=$(drbd_get_device_for_res "$DRBD_RES_NAME")

# Create filesystem on drbd device.
REGISTER_COMMAND=$(cat << EOF

  set -e

  $SUDO $(mkfs_command "$DRBD_DEVICE_PATH" "$FSTYPE" "$SIZE")

EOF
)

# Find node with a resource assigned to it.
RES_HOST=$(drbd_get_assignment_node "$DRBD_DEVICE_PATH" "$BRIDGE_LIST")

if [ -z "$RES_HOST" ]; then
  error_message "No node in $BRIDGE_LIST ready for IO on $DRBD_DEVICE_PATH"

  # Clean up resource.
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
fi

ssh_exec_and_log "$RES_HOST" "$REGISTER_COMMAND" \
   "Error registering $DRBD_RES_NAME on $RES_HOST"

drbd_log "Created $DRBD_RES_NAME on $RES_HOST"
drbd_log "Ending mkfs action."

echo "$DRBD_RES_NAME"
